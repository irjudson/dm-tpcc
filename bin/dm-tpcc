#!/usr/bin/env ruby
#
# This is a script to exercise your database with the TPC-C
# performance benchmark implemented using DataMapper.
#
require 'ostruct'
require 'optparse'
require 'bundler/setup'
Bundler.require(:default)

# Add local lib to path for development
lib = File.expand_path('../../lib/', __FILE__)
$:.unshift lib unless $:.include?(lib)

# Load dm-tpcc code
require 'dm-tpcc'

# Logging level map
LOG_LEVELS = {
  :off => 99999,
  :fatal => 7,
  :error => 6,
  :warn => 4,
  :info => 3,
  :debug => 0 }

$example_dbs = [ "sqlite3::memory:", "sqlite3://<directory>/tpcc.db", "mysql://localhost/tpcc", "postgres://localhost/tpcc", "persevere://localhost:8080/" ]

$data_directory = nil
$output = nil

def main
  # Parse command line options
  options = parse_options(ARGV)

  # Setup logging
  unless options.log_level == :off
    $logger = DataMapper::Logger.new(options.log_destination,
                                     LOG_LEVELS[options.log_level])
  end

  # Connect to a database to exercise
  DataMapper.setup(:default, options.db_url)

  # This sets up the database/repository connections and creates the
  #  database structure. Pass the repository to use to setup.
  DataMapper::TPCC::init
  DataMapper::TPCC::setup :default

  # This loads the initial test data into the database.
  # Pass a scale factor which is a number of warehouses to create
  # everything is scaled to the number of warehouses.
  if ! options.generate.nil?
    DataMapper::TPCC::generate options.generate
    DataMapper::TPCC::save if options.save_data
  elsif options.load
    DataMapper::TPCC::load
  elsif options.profile_strings
    output = compare_random_string_algorithms
    $output.print output
    exit
  end

  bm = DataMapper::TPCC::Benchmark.new

  if options.once
    # This measures the performance of the database
    output = bm.run_once
    $output.print output
  end

  bm.run($output, options.time)
end

# Parse command line options.
def parse_options(args)
  program = Pathname.new(__FILE__).realpath
  header = <<-END_HEADER
# Running #{program} on #{Time.now}
# Command-line arguments are: #{args}
# Command-line to reproduce: #{program} #{args.join(" ")}
#
END_HEADER
  timestamp = Time.now.strftime("%Y%m%d%H%M%S")
  current_dir = Pathname.pwd
  output_basename = current_dir + "log"
  output_basename.mkdir unless output_basename.directory?
  options = OpenStruct.new
  options.log_level = :off
  options.log_destination = STDOUT
  options.db_url = { :adapter => :in_memory }
  options.generate = nil
  options.time = 60
  options.profile_strings = false
  options.output_filename = "dm-tpcc-#{timestamp}.out"
  options.data_directory = current_dir + "data"
  options.load = false
  options.save_data = false

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: dm-tpcc [options]"
    opts.separator ""

    opts.on("-g NUM_WAREHOUSES", "--generate NUM_WAREHOUSES", Integer,
            "Generate data for the number of warehouses.") do |g| 
      options.generate = g 
    end

    opts.on("-s DIRECTORY_NAME", "--save DIRECTORY_NAME",
            "Save generated data for later use.") do |s| 
      options.data_directory = s unless (s.nil? || s.empty?)
    end

    opts.on("-S", "--save-data", "Save generated data for later use.") do |s| 
      options.save_data = s
    end

    opts.on("-D", "--load-data", "Load data from saved datasets.") do |l|
      options.load = l
    end

    opts.on("--profile-string-algorithms",
            "Profile different string generators") do |sg| 
      options.profile_strings = sg 
    end

    opts.on("-d DB_URL", "--db-url DB_URL", String,
            "Specify a DataMapper DB URL") do |dburl| 
      options.db_url = dburl 
    end

    opts.on("-l LOG_LEVEL", "--log-level LOG_LEVEL", LOG_LEVELS,
            "Specify a log level.") do |l| 
      options.log_level = l.to_sym 
    end

    opts.on("-L LOG_FILE", "--log-file LOG_FILE", String,
            "Specify a log file.") do |f| 
      options.log_destination = File.new(f, "a+") 
    end

    opts.on("-o FILENAME", "--output FILENAME", String,
            "Filename to save output to.") do |outputfile| 
      options.output_filename = outputfile
    end

    opts.on("-t DURATION", "--time DURATION", Integer,
            "Duration of the test in seconds.") do |time| 
      options.time = time 
    end

    opts.on("--once", "Run just one time") do |once| 
      options.once = once 
    end

    opts.separator "Common Options:"
    opts.on_tail("-h", "--help", "Show this message.") do
      puts opts

      print "\nLog Levels:\n"
      LOG_LEVELS.keys.each { |l| print "\t#{l}\n" }
      print "\nExample Database URLS:\n"
      $example_dbs.each { |db| print "\t#{db}\n" }
      exit
    end
    opts.on_tail("--version", "Show version") do
      puts DataMapper::TPCC::VERSION
      exit
    end
  end

  opts.parse!(args)
  
  # Process options into global variables (ick)
  $output = File.open(output_basename + options.output_filename, "w+")
  $output.print header
  $data_directory = options.data_directory
  $data_directory.mkdir unless $data_directory.directory?

  options
end

def compare_random_string_algorithms(iterations = 1000, size = 500)
  sio = StringIO.new
  old_stdout, $stdout = $stdout, sio
  
  puts "Generating #{iterations} strings of length #{size}."
  Benchmark.bm(12) do |x|
    x.report("DM::TPCC:  "){ iterations.times do ; DataMapper::TPCC::random_string(500,500)       ; end }
    x.report("Randgen:   "){ iterations.times do ; /[:paragraph:]{10}/.gen[0,500]                 ; end }
    x.report("Char Cat:  "){ iterations.times do ; str = ""; size.of { str << Randgen.char }; str ; end }
    x.report("Char Join: "){ iterations.times do ; size.of { Randgen.char }.join("")              ; end }

  end
  
  $stdout = old_stdout
  sio.string
end

#
# Run the actual test
#
main

